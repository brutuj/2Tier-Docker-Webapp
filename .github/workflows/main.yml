
name: New Build Docker Image and Push to AWS ECR

on:
  push:
    branches: [ "master" ]
 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
 
    env:
     ECR_REPO_PREFIX: assgnmnt1-dev
     IMAGE_TAG: v1.0
     DBHOST: 172.18.0.2
     DBPORT: 3306
     DBUSER: root
     DATABASE: employees
     DBPWD: pw
       
     
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1   
          
          
      - name: Initialization, Creating Bridge network, Building Docker Images
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd clo835_fall2022_assignment1/  
          ls -ltra
          
          #docker network create -d bridge my-net
          
          # Docker build for mysql
          docker build -f Dockerfile_mysql -t $ECR_REGISTRY/$ECR_REPO_PREFIX-db:$IMAGE_TAG .
          
          # Docker build for app
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPO_PREFIX-app:$IMAGE_TAG .
          
          
          
      - name: MySQL tag, and push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd clo835_fall2022_assignment1/  
          ls -ltra
          
          
          # Unit test
          docker run -d --network my-net -e MYSQL_ROOT_PASSWORD=pw $ECR_REGISTRY/$ECR_REPO_PREFIX-mysql:$IMAGE_TAG
          docker ps
          echo "Pause for 10 seconds to let container start"
          sleep 10
          docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-mysql:$IMAGE_TAG
          
          
          
          
          
          
          
          
      - name: Blue tag, and push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd clo835_fall2022_assignment1/  
          ls -ltra
          
          
         
          # Unit test
          docker run -d -p 8081:8080 --network my-net --name blue -e APP_COLOR=blue -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR_REGISTRY/$ECR_REPO_PREFIX-app:$IMAGE_TAG
          docker ps 
          echo "Pause for 10 seconds to let container start"
          sleep 10
          docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-blue:$IMAGE_TAG
      
      
      
      
      
      
      
      - name: Pink tag, and push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd clo835_fall2022_assignment1/  
          ls -ltra
          
        
          # Unit test
          docker run -d -p 8082:8080 --network my-net --name pink -e APP_COLOR=pink -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR_REGISTRY/$ECR_REPO_PREFIX-pink:$IMAGE_TAG
          docker ps
          echo "Pause for 10 seconds to let container start"
          sleep 10
          docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-pink:$IMAGE_TAG
      
      
      
      
      
      
      - name: Lime tag, and push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd clo835_fall2022_assignment1/   
          ls -ltra
          
        
          # Unit test
          docker run -d -p 8083:8080 --network my-net --name lime -e APP_COLOR=lime -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD $ECR_REGISTRY/$ECR_REPO_PREFIX-lime:$IMAGE_TAG
          docker ps
          echo "Pause for 10 seconds to let container start"
          sleep 10
          docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-lime:$IMAGE_TAG
          
